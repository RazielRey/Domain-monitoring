
---
- name: Install prerequisites for Docker
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present
    update_cache: yes

- name: Add Docker's official GPG key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker repository
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present

- name: Install Docker and other required packages
  apt:
    name: 
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - python3-pip
      - python3-jenkins
      - python3-setuptools
    state: present
    update_cache: yes

- name: Add ubuntu user to docker group
  user:
    name: ubuntu
    groups: docker
    append: yes

- name: Create base Jenkins home directory
  file:
    path: "{{ jenkins_home }}"
    state: directory
    mode: '0755'
    owner: 1000
    group: 1000

- name: Setup Jenkins subdirectories
  file:
    path: "{{ item }}"
    state: directory
    owner: 1000
    group: 1000
    mode: '0755'
    recurse: yes
  with_items:
    - "{{ jenkins_home }}/plugins"
    - "{{ jenkins_home }}/init.groovy.d"

- name: Create Jenkins init script
  template:
    src: init-script.groovy.j2
    dest: "{{ jenkins_home }}/init.groovy.d/basic-security.groovy"
    owner: 1000
    group: 1000
    mode: '0644'

- name: Run Jenkins Container
  docker_container:
    name: jenkins
    image: jenkins/jenkins
    state: started
    restart_policy: always
    ports:
      - "{{ jenkins_port }}:8080"
      - "{{ jenkins_agent_port }}:50000"
    volumes:
      - "{{ jenkins_home }}:{{ jenkins_home }}"
    env:
      JAVA_OPTS: "{{ java_args }}"

- name: Wait for Jenkins to start
  uri:
    url: "http://{{ jenkins_master_ip }}:8080/login"
    status_code: [200, 403]
    timeout: 5
    validate_certs: no
  register: result
  until: result.status in [200, 403]
  retries: 60
  delay: 5

- name: Install Jenkins plugins with dependencies
  jenkins_script:
    script: "{{ lookup('template', 'install-plugins.groovy.j2') }}"
    url: "http://{{ jenkins_master_ip }}:8080"
    user: admin
    password: "{{ jenkins_admin_password }}"
    validate_certs: no

- name: Wait for plugins to install
  pause:
    seconds: 50

- name: Restart Jenkins
  docker_container:
    name: jenkins
    state: started
    restart: yes
    image: jenkins/jenkins
    ports:
      - "{{ jenkins_port }}:8080"
      - "{{ jenkins_agent_port }}:50000"
    volumes:
      - "{{ jenkins_home }}:{{ jenkins_home }}"
    env:
      JAVA_OPTS: "{{ java_args }}"

- name: Wait for Jenkins to be fully operational
  uri:
    url: "http://{{ jenkins_master_ip }}:8080/api/json"
    user: admin
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    status_code: 200
    validate_certs: no
  register: result
  until: result.status == 200
  retries: 30
  delay: 10

- name: Create Jenkins node
  jenkins_script:
    script: "{{ lookup('template', 'node-creation.groovy.j2') }}"
    url: "http://{{ jenkins_master_ip }}:8080"
    user: admin
    password: "{{ jenkins_admin_password }}"
    validate_certs: no
  register: agent_node_creation

- name: Debug node creation output
  debug:
    var: agent_node_creation
    verbosity: 0

- name: Store Docker agent secret in AWS Secrets Manager
  community.aws.aws_secret:
    name: "/jenkins/agents/docker"
    secret: "{{ agent_node_creation.output | regex_search('docker:(.*)', '\\1') | first | default('') }}"
    state: present
  delegate_to: localhost
  when: 
    - agent_node_creation is succeeded
    - agent_node_creation.output is regex('docker:.*')
  ignore_errors: yes

- name: Store Ansible agent secret in AWS Secrets Manager
  community.aws.aws_secret:
    name: "/jenkins/agents/ansible"
    secret: "{{ agent_node_creation.output | regex_search('ansible:(.*)', '\\1') | first | default('') }}"
    state: present
  delegate_to: localhost
  when:
    - agent_node_creation is succeeded 
    - agent_node_creation.output is regex('ansible:.*')
  ignore_errors: yes

- name: Create Docker Pipeline job
  jenkins_script:
    script: "{{ lookup('template', 'docker-pipeline-creation.groovy.j2') }}"
    url: "http://{{ jenkins_master_ip }}:8080"
    user: admin
    password: "{{ jenkins_admin_password }}"
    validate_certs: no
  register: docker_pipeline_creation
  retries: 3
  delay: 5
  until: docker_pipeline_creation is success

- name: Debug Docker pipeline creation output
  debug:
    msg: 
      - "Creation Output: {{ docker_pipeline_creation.output | default('no output') }}"
      - "Creation Error: {{ docker_pipeline_creation.error | default('no error') }}"
  failed_when: docker_pipeline_creation.failed
  when: docker_pipeline_creation is defined

- name: Get Jenkins logs for pipeline creation
  shell: "docker logs jenkins --tail 100"
  register: jenkins_logs
  when: docker_pipeline_creation is defined

- name: Debug Jenkins logs for pipeline creation
  debug:
    var: jenkins_logs.stdout_lines
  when: docker_pipeline_creation is defined

- name: Get API response for job URL
  uri:
    url: "http://{{ jenkins_master_ip }}:8080/api/json?tree=jobs[name,url]"
    user: admin
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    validate_certs: no
    status_code: [200]
  register: jobs_list

- name: Debug available jobs
  debug:
    msg: "Available jobs: {{ jobs_list.json.jobs | map(attribute='name') | list }}"

- name: Create Ansible Pipeline job
  jenkins_script:
    script: "{{ lookup('template', 'ansible-pipeline-creation.groovy.j2') }}"
    url: "http://{{ jenkins_master_ip }}:8080"
    user: admin
    password: "{{ jenkins_admin_password }}"
    validate_certs: no
  register: ansible_pipeline_creation
  retries: 3
  delay: 5
  until: ansible_pipeline_creation is success

- name: Verify Docker pipeline creation
  uri:
    url: "http://{{ jenkins_master_ip }}:8080/job/docker-domain-monitor-pipeline/api/json"
    user: admin
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    validate_certs: no
    status_code: [200, 404]
    return_content: yes
  register: docker_verify
  until: docker_verify.status == 200
  retries: 12
  delay: 10
  ignore_errors: yes

- name: Debug Docker pipeline verification
  debug:
    msg: 
      - "Status: {{ docker_verify.status }}"
      - "URL checked: {{ docker_verify.url }}"
      - "Response content: {{ docker_verify.content | default('no content') }}"
  when: docker_verify.status != 200

- name: List all Jenkins jobs
  uri:
    url: "http://{{ jenkins_master_ip }}:8080/api/json?tree=jobs[name,url]"
    user: admin
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    validate_certs: no
  register: all_jobs
  when: docker_verify.status != 200

- name: Show available jobs
  debug:
    msg: "Available Jenkins jobs: {{ all_jobs.json.jobs | map(attribute='name') | list }}"
  when: docker_verify.status != 200and all_jobs.json is defined

- name: Get Jenkins logs
  shell: docker logs jenkins
  register: jenkins_logs
  when: docker_verify.status != 200

- name: Debug Jenkins logs
  debug:
    var: jenkins_logs.stdout_lines
    verbosity: 0
  when: docker_verify.status != 200

- name: Check Jenkins jobs list
  uri:
    url: "http://{{ jenkins_master_ip }}:8080/api/json?tree=jobs[name]"
    user: admin
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    validate_certs: no
    return_content: yes
  register: jenkins_jobs
  when: docker_verify.status != 200

- name: Debug Jenkins jobs
  debug:
    var: jenkins_jobs
    verbosity: 0
  when: docker_verify.status != 200

- name: Verify Ansible pipeline creation
  uri:
    url: "http://{{ jenkins_master_ip }}:8080/job/ansible-domain-monitor-pipeline/api/json"
    user: admin
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    validate_certs: no
    status_code: [200, 404]
    return_content: yes
  register: ansible_verify
  until: ansible_verify.status == 200
  retries: 12
  delay: 10
  ignore_errors: yes

- name: Debug Docker pipeline creation
  debug:
    var: docker_pipeline_creation
    verbosity: 1
  when: docker_pipeline_creation is defined

- name: Debug Ansible pipeline creation
  debug:
    var: ansible_pipeline_creation
    verbosity: 1
  when: ansible_pipeline_creation is defined

- name: Include Docker credentials 
  include_vars:
    file: docker_credentials.yml

- name: Add Docker credentials in Jenkins
  jenkins_script:
    script: |
      def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
        com.cloudbees.plugins.credentials.common.StandardUsernamePasswordCredentials.class,
        jenkins.model.Jenkins.instance
      )
      def dockerCreds = new com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl(
        com.cloudbees.plugins.credentials.CredentialsScope.GLOBAL,
        'docker',
        'Docker Hub Credentials',
        '{{ docker_username }}',
        '{{ docker_password }}'
      )
      com.cloudbees.plugins.credentials.SystemCredentialsProvider.getInstance().getStore().addCredentials(
        com.cloudbees.plugins.credentials.domains.Domain.global(), 
        dockerCreds
      )
    url: "http://{{ jenkins_master_ip }}:8080"
    user: admin
    password: "{{ jenkins_admin_password }}"
    validate_certs: no
