import jenkins.model.*
import org.jenkinsci.plugins.workflow.job.*
import org.jenkinsci.plugins.workflow.cps.*
import hudson.plugins.git.*
import hudson.triggers.SCMTrigger
import hudson.model.*
import hudson.model.Cause
import hudson.security.ACL
import jenkins.triggers.SCMTriggerItem
import hudson.model.StringParameterDefinition
import hudson.model.ParametersDefinitionProperty
import hudson.model.Label

def jenkins = Jenkins.getInstance()

def pipelineName = "ansible-{{ jenkins_pipeline.name }}"
def gitRepoUrl = "{{ jenkins_pipeline.git_repo }}"
def gitBranch = "{{ jenkins_pipeline.git_branch }}"
def jenkinsfilePath = "{{ jenkins_pipeline.ansible_jenkinsfile_path }}"

println "Starting Ansible pipeline creation for: ${pipelineName}"
println "Git URL: ${gitRepoUrl}"
println "Branch: ${gitBranch}" 
println "Jenkinsfile: ${jenkinsfilePath}"

try {
   def existingJob = jenkins.getItem(pipelineName)
   if (existingJob != null) {
       println "Found existing job, deleting"
       existingJob.delete()
   }

   println "Initializing new pipeline job"
   def pipelineJob = jenkins.createProject(WorkflowJob.class, pipelineName)

   println "Setting up Git SCM configuration"
   def userRemoteConfig = new UserRemoteConfig(gitRepoUrl, null, null, null)
   def gitScmConfig = [new BranchSpec(gitBranch)]
   
   def scm = new GitSCM(
       Collections.singletonList(userRemoteConfig),
       gitScmConfig,
       false,
       Collections.emptyList(),
       null,
       null,
       Collections.emptyList()
   )

   println "Configuring pipeline parameters"
   def parameterDefinitions = [
       new StringParameterDefinition('IMAGE_TAG', 'latest', 'Docker image tag to deploy')
   ]
   pipelineJob.addProperty(new ParametersDefinitionProperty(parameterDefinitions))

   println "Setting up SCM definition"
   def definition = new CpsScmFlowDefinition(scm, jenkinsfilePath)  
   definition.setLightweight(true)
   pipelineJob.setDefinition(definition)

   println "Setting agent label"
   def label = Label.get("ansible")
   pipelineJob.setAssignedLabel(label)

   println "Saving configuration"
   pipelineJob.save()
   jenkins.save()

   println "Triggering initial build"
   pipelineJob.scheduleBuild2(0, new Cause.UserIdCause())

   println "Pipeline created successfully"

} catch (Exception e) {
   println "Error creating pipeline: ${pipelineName}"
   println "Error type: ${e.getClass().getName()}"
   println "Error message: ${e.message}"
   e.printStackTrace()
   throw e
}