import jenkins.model.*
import hudson.model.*
import org.jenkinsci.plugins.workflow.job.WorkflowJob
import org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition
import hudson.plugins.git.*
import hudson.triggers.SCMTrigger
import hudson.model.Cause
import hudson.security.ACL
import jenkins.triggers.SCMTriggerItem
import hudson.scm.SCM

def jenkins = Jenkins.getInstance()

def pipelineName = "docker-{{ jenkins_pipeline.name }}"
def gitRepoUrl = "{{ jenkins_pipeline.git_repo }}"
def gitBranch = "{{ jenkins_pipeline.git_branch }}"
def jenkinsfilePath = "{{ jenkins_pipeline.jenkinsfile_path }}"

println "Creating pipeline with:"
println "Name: ${pipelineName}"
println "Git URL: ${gitRepoUrl}" 
println "Branch: ${gitBranch}"
println "Jenkinsfile: ${jenkinsfilePath}"

try {
   def existingJob = jenkins.getItem(pipelineName)
   if (existingJob != null) {
       existingJob.delete()
   }

   WorkflowJob pipelineJob = jenkins.createProject(WorkflowJob.class, pipelineName)

   def gitScmConfig = [new hudson.plugins.git.BranchSpec(gitBranch)]
   def userRemoteConfig = new hudson.plugins.git.UserRemoteConfig(gitRepoUrl, null, null, null)
   def scmSources = Collections.singletonList(userRemoteConfig)
   
   println "Configuring SCM with repository: ${gitRepoUrl}"
   def gitScm = new hudson.plugins.git.GitSCM(
       scmSources,
       gitScmConfig,
       false,
       [],
       null,
       null,
       []
   )

   def flowDefinition = new CpsScmFlowDefinition(gitScm, jenkinsfilePath)
   flowDefinition.setLightweight(true)
   pipelineJob.setDefinition(flowDefinition)

   // Set to run only on Docker agent
   pipelineJob.setAssignedLabel(jenkins.getLabel("docker"))
   println "Set pipeline to run on docker agent"

   if (pollSchedule?.trim()) {
       def trigger = new SCMTrigger(pollSchedule)
       trigger.setIgnorePostCommitHooks(false)
       pipelineJob.addTrigger(trigger)
       println "Added SCM polling schedule: ${pollSchedule}"
   }

   pipelineJob.save()
   jenkins.save()

   def cause = new Cause.UserIdCause()
   pipelineJob.scheduleBuild2(0, cause)
   println "Pipeline created and initial build triggered"

} catch (Exception e) {
   println "Error creating pipeline: ${e.message}"
   e.printStackTrace()
   throw e
}